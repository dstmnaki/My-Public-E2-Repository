@name XT 451 Basilisk
@inputs [Seat Base Left_Wing Right_Wing Left_Wing_Joint Right_Wing_Joint Cannon_Base Cannon_Turret]:entity CamAng:angle AimPos:vector EGP:wirelink ReadyLeft ReadyRight
@persist RPMMult RPM [CamAng2 CamAng3 CamAngLocal2 Inertia]:angle Step FireMode AimLock [Rangers PosData]:array AimPos2:vector
@persist Find:array FOV CamActive CamPos:vector CamDist
@outputs Find:array FOV CamActive CamPos:vector CamDist FireLeftCannon FireRightCannon
@trigger none
if(dupefinished()){reset()}
if(first()){
    
    EGP:egpClear()
    
    Reso=vec2(egpScrW(owner()),egpScrH(owner()))/2
    
    HudSize=0.8
    
    EGP:egpCircle(1,vec2()+Reso,vec2(1))
    
    EGP:egpLine(2,vec2(0,30)*HudSize+Reso,vec2(0,70)*HudSize+Reso)
    EGP:egpLine(3,vec2(0,30):rotate(120)*HudSize+Reso,vec2(0,70):rotate(120)*HudSize+Reso)
    EGP:egpLine(4,vec2(0,30):rotate(-120)*HudSize+Reso,vec2(0,70):rotate(-120)*HudSize+Reso)
    
    EGP:egpLine(5,vec2(120,100)*HudSize+Reso,vec2(175,100)*HudSize+Reso)
    EGP:egpLine(6,vec2(-120,100)*HudSize+Reso,vec2(-175,100)*HudSize+Reso)
    
    EGP:egpLine(7,vec2(120*1.25,150)*HudSize+Reso,vec2(175*1.5,150)*HudSize+Reso)
    EGP:egpLine(8,vec2(-120*1.25,150)*HudSize+Reso,vec2(-175*1.5,150)*HudSize+Reso)
    
    EGP:egpLine(9,vec2(120*1.5,200)*HudSize+Reso,vec2(175*2,200)*HudSize+Reso)
    EGP:egpLine(10,vec2(-120*1.5,200)*HudSize+Reso,vec2(-175*2,200)*HudSize+Reso)
    
    EGP:egpLine(11,vec2(120,-100)*HudSize+Reso,vec2(175,-100)*HudSize+Reso)
    EGP:egpLine(12,vec2(-120,-100)*HudSize+Reso,vec2(-175,-100)*HudSize+Reso)
    
    EGP:egpLine(13,vec2(120*1.25,-150)*HudSize+Reso,vec2(175*1.5,-150)*HudSize+Reso)
    EGP:egpLine(14,vec2(-120*1.25,-150)*HudSize+Reso,vec2(-175*1.5,-150)*HudSize+Reso)
    
    EGP:egpLine(15,vec2(120*1.5,-200)*HudSize+Reso,vec2(175*2,-200)*HudSize+Reso)
    EGP:egpLine(16,vec2(-120*1.5,-200)*HudSize+Reso,vec2(-175*2,-200)*HudSize+Reso)
    
    EGP:egpText(17,"KM/H",vec2(-550,-20)+Reso)
    EGP:egpText(18,"000",vec2(-550,10)+Reso)
    EGP:egpSize(17,30)
    EGP:egpSize(18,30)
    
    EGP:egpCircle(19,vec2(-750,250)+Reso,vec2(120))
    EGP:egpAlpha(19,10)
    EGP:egpCircle(20,vec2(-750,250)+Reso,vec2(98))
    EGP:egpAlpha(20,60)
    EGP:egpColor(20,vec())
    
    EGP:egpText(21,"N",vec2(0,-105))
    EGP:egpParent(21,19)
    EGP:egpAlign(21,1,1)
    EGP:egpAngle(21,0)
    
    EGP:egpText(22,"E",vec2(105,00))
    EGP:egpParent(22,19)
    EGP:egpAlign(22,1,1)
    EGP:egpAngle(22,90)
    
    EGP:egpText(23,"S",vec2(0,105))
    EGP:egpParent(23,19)
    EGP:egpAlign(23,1,1)
    EGP:egpAngle(23,180)
    
    EGP:egpText(24,"W",vec2(-105,0))
    EGP:egpParent(24,19)
    EGP:egpAlign(24,1,1)
    EGP:egpAngle(24,-90)
    
    EGP:egpTriangle(25,vec2(-5,-120),vec2(5,-120),vec2(0,-115))
    EGP:egpParent(25,20)
    
    EGP:egpBox(26,vec2(-750,250)+Reso,vec2())
    
    EGP:egpLine(27,vec2(-15,-75),vec2(15,-75))
    EGP:egpParent(27,26)
    
    EGP:egpLine(28,vec2(-15,-75),vec2(-35,0))
    EGP:egpParent(28,26)
    
    EGP:egpLine(29,vec2(15,-75),vec2(35,0))
    EGP:egpParent(29,26)
    
    EGP:egpLine(30,vec2(-35,0),vec2(-35,65))
    EGP:egpParent(30,26)
    
    EGP:egpLine(31,vec2(35,0),vec2(35,65))
    EGP:egpParent(31,26)
    
    EGP:egpLine(32,vec2(-35,65),vec2(-25,75))
    EGP:egpParent(32,26)
    
    EGP:egpLine(33,vec2(35,65),vec2(25,75))
    EGP:egpParent(33,26)
    
    EGP:egpLine(34,vec2(-25,75),vec2(-15,65))
    EGP:egpParent(34,26)
    
    EGP:egpLine(35,vec2(25,75),vec2(15,65))
    EGP:egpParent(35,26)
    
    EGP:egpLine(36,vec2(-15,65),vec2(15,65))
    EGP:egpParent(36,26)
    
    EGP:egpLine(37,vec2(-35,45),vec2(-45,45))
    EGP:egpParent(37,26)
    
    EGP:egpLine(38,vec2(35,45),vec2(45,45))
    EGP:egpParent(38,26)
    
    EGP:egpLine(39,vec2(-45,45),vec2(-55,10))
    EGP:egpParent(39,26)
    
    EGP:egpLine(40,vec2(45,45),vec2(55,10))
    EGP:egpParent(40,26)
    
    EGP:egpLine(41,vec2(-55,10),vec2(-55,-60))
    EGP:egpParent(41,26)
    
    EGP:egpLine(42,vec2(55,10),vec2(55,-60))
    EGP:egpParent(42,26)
    
    EGP:egpLine(43,vec2(-55,-60),vec2(-38,-68))
    EGP:egpParent(43,26)
    
    EGP:egpLine(44,vec2(55,-60),vec2(38,-68))
    EGP:egpParent(44,26)
    
    EGP:egpLine(45,vec2(-38,-68),vec2(-32,-60))
    EGP:egpParent(45,26)
    
    EGP:egpLine(46,vec2(38,-68),vec2(32,-60))
    EGP:egpParent(46,26)
    
    EGP:egpLine(47,vec2(-32,-60),vec2(-15,-75))
    EGP:egpParent(47,26)
    
    EGP:egpLine(48,vec2(32,-60),vec2(15,-75))
    EGP:egpParent(48,26)
    
    EGP:egpBox(49,vec2(0,40),vec2())
    EGP:egpParent(49,26)
    
    EGP:egpLine(50,vec2(8,-10),vec2(-8,-10))
    EGP:egpParent(50,49)
    
    EGP:egpLine(51,vec2(8,-10),vec2(12,5))
    EGP:egpParent(51,49)
    
    EGP:egpLine(52,vec2(-8,-10),vec2(-12,5))
    EGP:egpParent(52,49)
    
    EGP:egpLine(53,vec2(12,5),vec2(12,20))
    EGP:egpParent(53,49)
    
    EGP:egpLine(54,vec2(-12,5),vec2(-12,20))
    EGP:egpParent(54,49)
    
    EGP:egpLine(55,vec2(-12,20),vec2(12,20))
    EGP:egpParent(55,49)
    
    EGP:egpBoxOutline(56,vec2(-18,15),vec2(12,25))
    EGP:egpParent(56,49)
    
    EGP:egpBoxOutline(57,vec2(18,15),vec2(12,25))
    EGP:egpParent(57,49)
    
    EGP:egpBoxOutline(58,vec2(-18,-19),vec2(5,45))
    EGP:egpParent(58,49)
    
    EGP:egpBoxOutline(59,vec2(18,-19),vec2(5,45))
    EGP:egpParent(59,49)
    
    for(I=1,19){
        EGP:egpColor(I,vec(0,255,255))
    }
    
    for(I=21,25){
        EGP:egpColor(I,vec(0,255,255))
        EGP:egpAlpha(I,125)
    }
    
    for(I=27,59){
        EGP:egpColor(I,vec(0,255,255))
    }
    CamPos=vec(-115,0,125)
    CamDist=75
    
    Base:setMass(41000)
    Base:propDrag(0)
    
    WheelData=array(
    115,80,
    
    -90,90
    )
    
    WD=WheelData
    PosData=array(
    vec(WD[1,number],WD[2,number],0),
    vec(WD[1,number],-WD[2,number],0),
    vec(WD[3,number],WD[4,number],0),
    vec(WD[3,number],-WD[4,number],0))
    #[
    for(I=1,4){
        holoCreate(I)
        holoPos(I,Base:toWorld(PosData[I,vector]))
        holoAng(I,Base:angles())
        holoParent(I,Base)
    }
    ]#
    
    local I = 1
    local E = Base
    local T = Left_Wing_Joint
    holoCreate(I)
    holoPos(I,T:pos())
    holoAng(I,T:angles())
    T:parentTo(holoEntity(I))
    holoPos(I,E:toWorld(vec(0,60,15)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoParent(I,E)
    
    local I = 2
    local E = holoEntity(1)
    local T = Left_Wing
    holoCreate(I)
    holoPos(I,T:pos())
    holoAng(I,T:angles())
    T:parentTo(holoEntity(I))
    holoPos(I,E:toWorld(vec(0,25,-20)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoParent(I,E)
    
    
    local I = 3
    local E = Base
    local T = Right_Wing_Joint
    holoCreate(I)
    holoPos(I,T:pos())
    holoAng(I,T:angles())
    T:parentTo(holoEntity(I))
    holoPos(I,E:toWorld(vec(0,-60,15)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoParent(I,E)
    
    local I = 4
    local E = holoEntity(3)
    local T = Right_Wing
    holoCreate(I)
    holoPos(I,T:pos())
    holoAng(I,T:angles())
    T:parentTo(holoEntity(I))
    holoPos(I,E:toWorld(vec(0,-25,-20)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoParent(I,E)
    
    local I = 5
    local E = Base
    local T = Cannon_Base
    holoCreate(I)
    holoPos(I,T:pos())
    holoAng(I,T:angles())
    T:parentTo(holoEntity(I))
    holoPos(I,E:toWorld(vec(-115,0,60)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoParent(I,E)
    
    local I = 6
    local E = holoEntity(5)
    local T = Cannon_Turret
    holoCreate(I)
    holoPos(I,T:pos())
    holoAng(I,T:angles())
    T:parentTo(holoEntity(I))
    holoPos(I,E:toWorld(vec(-25,0,15)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoParent(I,E)
    
    local I = 7
    local E = holoEntity(6)
    holoCreate(I)
    holoPos(I,E:toWorld(vec(0,0,0)))
    holoAng(I,E:toWorld(ang(0,0,0)))
    holoParent(I,E)
    
    EGP:egp3DTracker(60,vec())
    EGP:egpParent(60,holoEntity(7))
    EGP:egpCircleOutline(61,vec2(),vec2(7))
    EGP:egpColor(61,vec(200))
    EGP:egpAlpha(61,50)
    EGP:egpParent(61,60)
    
    EGP:egpTriangle(62,vec2(12,-4),vec2(12,4),vec2(25,0))
    EGP:egpColor(62,vec(200))
    EGP:egpAlpha(62,100)
    EGP:egpParent(62,60)
    
    EGP:egpTriangle(63,vec2(-12,-4),vec2(-12,4),vec2(-25,0))
    EGP:egpColor(63,vec(200))
    EGP:egpAlpha(63,100)
    EGP:egpParent(63,60)
    
    
    EGP:egpLine(64,vec2(900,450)+Reso,vec2(800,450)+Reso)
    EGP:egpSize(64,10)
    
    EGP:egpLine(65,vec2(900,430)+Reso,vec2(800,430)+Reso)
    EGP:egpSize(65,10)
    
    EGP:egpLine(66,vec2(900,410)+Reso,vec2(810,410)+Reso)
    EGP:egpSize(66,10)
    
    EGP:egpLine(67,vec2(900,390)+Reso,vec2(820,390)+Reso)
    EGP:egpSize(67,10)
    
    EGP:egpLine(68,vec2(900,370)+Reso,vec2(820,370)+Reso)
    EGP:egpSize(68,10)
    
    EGP:egpLine(69,vec2(900,350)+Reso,vec2(820,350)+Reso)
    EGP:egpSize(69,10)
    
    EGP:egpLine(70,vec2(900,330)+Reso,vec2(820,330)+Reso)
    EGP:egpSize(70,10)
    
    EGP:egpLine(71,vec2(900,310)+Reso,vec2(820,310)+Reso)
    EGP:egpSize(71,10)
    
    EGP:egpLine(72,vec2(900,290)+Reso,vec2(820,290)+Reso)
    EGP:egpSize(72,10)
    
    EGP:egpLine(73,vec2(900,270)+Reso,vec2(820,270)+Reso)
    EGP:egpSize(73,10)
    
    for(I=64,73){
        EGP:egpAlpha(I,55)
    }
    
    for(I=1,7){
        holoAlpha(I,0)
    }
    
    noCollideAll(Base,0)
    
    Inertia = shiftL(ang(Base:inertia()))
    
    
    function number approach(Cur,Tar,R) 
    {
    if (Cur < Tar) {
        return clamp(Cur + R,Cur,Tar)
    }
    elseif (Cur > Tar) {
        return clamp(Cur - R,Tar,Cur)
    }
    return Tar
    }
        
    function angle approachAngle(Cur:angle,Tar:angle,R) 
    {
    local DiffP = angnorm(Tar:pitch() - Cur:pitch())
    local DiffY = angnorm(Tar:yaw() - Cur:yaw())
    local DiffR = angnorm(Tar:roll() - Cur:roll())
    if (DiffP > 180) { DiffP -= 360 }
    if (DiffY > 180) { DiffY -= 360 }
    if (DiffR > 180) { DiffR -= 360 }
    return ang(
                approach(Cur:pitch(),Cur:pitch()+DiffP,R),
                approach(Cur:yaw(),Cur:yaw()+DiffY,R),
                approach(Cur:roll(),Cur:roll()+DiffR,R)
              )
    }
    
    #rangerHitEntities(0)
    
    findIncludeClass("prop_*")
    findExcludeClass("wire_*")
    findIncludePlayerProps(owner())
    findInSphere(Base:pos(),1500)
    Find=findToArray()
    rangerFilter(Find)
    rangerFilter(players())
    rangerFilter(array(Base))
    #rangerFilter(Base:children())
    rangerHitWater(1)
    rangerPersist(1)
}
interval(100)
for(I=1,4){
    Pos = Base:toWorld(PosData[I,vector]:setZ((15+10)))
    Rangers[I,ranger]=rangerOffsetHull(200+(15+10),Pos,-Base:up(),vec(25,25,1))
}

Driver=Seat:driver()
CamActive=Driver:isPlayer()
A=Driver:keyLeft()
D=Driver:keyRight()
W=Driver:keyForward()
S=Driver:keyBack()
Shift=Driver:keySprint()
Space=Driver:keyJump()
Mouse1=Driver:keyAttack1()
FireSelector=Driver:keyReload()
Mouse3=Driver:keyPressed("mouse_middle")
Mouse2=Driver:keyAttack2()

if(changed(CamActive)){
    if(CamActive){
        Base:emitSound("acf_extra/vehiclefx/engines/gnomefather/gt101up.wav",200,100)
        Base:soundPlay("sfx",0,"acf_extra/vehiclefx/engines/gnomefather/gt101.wav")
    }else{
        Base:emitSound("acf_extra/vehiclefx/engines/gnomefather/gt101down.wav",200,100)
    }
}
soundPitch("sfx",90*RPM+(45*RPMMult))
soundVolume("sfx",RPM)

if(changed(Mouse2)){
    FOV=Mouse2 ? 40 : 100
}
if(changed(FireSelector)&FireSelector){
    FireMode=!FireMode
    if(FireMode){
        Seat:hintDriver("Firing mode: Rapid-fire",7)
    }else{
        Seat:hintDriver("Firing mode: Fire Both Barrels",7)
    }
}
if(changed(Mouse3)&Mouse3){
    AimLock=!AimLock
    if(AimLock){
        Seat:hintDriver("Focusing on target.",7)
    }else{
        Seat:hintDriver("Focusing point unset.",7)
    }
}

if(changed(Mouse1)&Mouse1){
    timer("step",1)
}
if(!Mouse1){
    stoptimer("step")
}
if(clk("step")){
    if(Mouse1){
        timer("step",FireMode ? 250 : 500)
        if(FireMode){
            if(clk("step")){
                Step=!Step
            }
            if(changed(Step)){
                FireLeftCannon=Step
                FireRightCannon=!Step
                timer("unfire",100)
            }
        }else{
            if(clk("step")){
                FireLeftCannon=FireRightCannon=1
                Step=0
                timer("unfire",100)
            }
        }
    }
}
if(clk("unfire")){
    FireLeftCannon=FireRightCannon=0
}

Moving=(W|S|A|D)*(RPMMult<(Shift*(W|S|A|D) ? 1.5 : 0.85))
RPM+=0.1*(CamActive-!CamActive)
RPM=clamp(RPM,0,1)
RPMMult+=0.035*(Moving-!Moving)
RPMMult=clamp(RPMMult,0,1.5)*RPM

Ground_Distance=((Rangers[1,ranger]:distance()+Rangers[2,ranger]:distance()+Rangers[3,ranger]:distance()+Rangers[4,ranger]:distance())/4)-(15+10)
HeightAdj=Base:up()*((mix(vec(45),vec(-35),RPM):x()+25*Space)-Ground_Distance)

Dir=(Base:forward()*(W-S)+Base:right()*(D-A)*0.4):normalized()*mix(vec(90),vec(45),RPMMult):x()
Downhill=(Base:forward()*Base:angles():pitch()+Base:right()*Base:angles():roll())*(2/(1+(clamp(W+S,0,1)*2)))*0.5*CamActive
Damp2=0.55*clamp(1-RPMMult,0.3,1)
Damp=-((Base:forward()*Base:velL():x()*Damp2)-(Base:right()*Base:velL():y()*Damp2)+(Base:up()*Base:velL():z()*0.8))

On_Ground=Ground_Distance<(125)
if(On_Ground){
    Base:propGravity(600*(RPM==0))
    Base:applyForce((Downhill+Dir+HeightAdj+Damp)*Base:mass()*0.5*RPM)
    Front=Rangers[1,ranger]:distance()+Rangers[2,ranger]:distance()
    Back=Rangers[3,ranger]:distance()+Rangers[4,ranger]:distance()
    FrontBack=((Front-Back)*1.9)
    Left=Rangers[1,ranger]:distance()+Rangers[3,ranger]:distance()
    Right=Rangers[2,ranger]:distance()+Rangers[4,ranger]:distance()
    LeftRight=((Left-Right)*1.7)
    FBLR=vec2(FrontBack,LeftRight)
    AngDamp=Base:angVel()*ang(6,5,5)
    if(!AimLock){
        AimPos2=AimPos
    }
    if(CamActive){
        CamAng2=CamAng
        CamAng3=(AimPos2-holoEntity(6):pos()):toAngle()
    }else{
        CamAng3=Base:angles()
    }
    Base:applyAngForce(((Base:toLocal((ang(clamp(FBLR:x(),-75,75)/3,0,clamp(-FBLR:y(),-75,75)/3.5))+ang(0,Base:angles():yaw()+clamp(Base:toLocal(CamAng2):yaw()*0.3*RPM,-15,15),0))*25)-(AngDamp))*Base:mass()*10*RPM)
}else{
    Base:propGravity(1)
}
KMH=toUnit( "km/h", Base:vel():length())

holoAng(1,Base:toWorld(ang(0,0,-10*clamp(Base:velL():y()*0.01,-1,1)*RPMMult)))
holoAng(2,holoEntity(1):toWorld(ang(5*clamp((Base:velL():x()*0.01*RPMMult)+(-Base:angVel():yaw()*0.025),-1,1),0,0)))

holoAng(3,Base:toWorld(ang(0,0,-10*clamp(Base:velL():y()*0.01,-1,1)*RPMMult)))
holoAng(4,holoEntity(3):toWorld(ang(5*clamp((Base:velL():x()*0.01*RPMMult)+(Base:angVel():yaw()*0.025),-1,1),0,0)))

CamAngLocal=Base:toLocal(CamAng3)
if(CamActive){
    CamAngLocal2=approachAngle(CamAngLocal2,CamAngLocal,5)
}else{
    CamAngLocal2=CamAngLocal
}
holoAng(5,Base:toWorld(ang(0,CamAngLocal2:yaw(),0)))
holoAng(6,holoEntity(5):toWorld(ang(clamp(CamAngLocal2:pitch(),-25,15),0,0)))

local Ranger=rangerOffset(9999,holoEntity(6):toWorld(vec(45,0,0)),holoEntity(6):angles():forward())
holoPos(7,Ranger:pos())

TankAng=CamAng:yaw()
EGP:egpAngle(19,-TankAng)

TankAngToCam=Base:toLocal(CamAng2):yaw()
EGP:egpAngle(26,-TankAngToCam)

TurretAng=Base:toLocal(holoEntity(5):angles()):yaw()
EGP:egpAngle(49,-TurretAng)
KMHE=round(KMH):toString():explode("")
SpeedText1=KMHE[KMHE:count(),string]
SpeedText2=KMHE[KMHE:count()-1,string] ?: "0"
SpeedText3=KMHE[KMHE:count()-3,string] ?: "0"
SpeedText=SpeedText3+SpeedText2+SpeedText1
EGP:egpSetText(18,SpeedText)
if(changed(ReadyRight)){
    EGP:egpColor(62,ReadyRight ? vec(0,255,255) : vec(125))
}
if(changed(ReadyLeft)){
    EGP:egpColor(63,ReadyLeft ? vec(0,255,255) : vec(125))
}
Throttle=(RPMMult/1.5)*10
Throttle2=round(Throttle)
if(changed(Throttle2)){
    for(I=1,10){
        I2=I+63
        EGP:egpColor(I2,I<=Throttle2 ? vec(0,255,255) : vec(125))
    }
}
